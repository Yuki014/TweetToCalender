var CONSUMER_KEY = 'API_Key';//取得したツイッターAPIのKey
var CONSUMER_SECRET = 'Secret_API_Key';//取得したツイッターAPIの秘密Key

/**
 * Twitter APIでアプリを認証するURLをログ表示
 */
function getAuthorizeURL() {
  var service = getService();
  var authorizationUrl = service.authorize();
  Logger.log('認証URLは下記です。\n%s',authorizationUrl);
}

/**
 * Reset the authorization state, so that it can be re-tested.
 */
function reset() {
  var service = getService();
  service.reset();
}

/**
 * Configures the service.
 */
function getService() {
  return OAuth1.createService('Twitter')
      // Set the endpoint URLs.
      .setAccessTokenUrl('https://api.twitter.com/oauth/access_token')
      .setRequestTokenUrl('https://api.twitter.com/oauth/request_token')
      .setAuthorizationUrl('https://api.twitter.com/oauth/authorize')

      // Set the consumer key and secret.
      .setConsumerKey(CONSUMER_KEY)
      .setConsumerSecret(CONSUMER_SECRET)

      // Set the name of the callback function in the script referenced
      // above that should be invoked to complete the OAuth flow.
      .setCallbackFunction('authCallback')

      // Set the property store where authorized tokens should be persisted.
      .setPropertyStore(PropertiesService.getUserProperties());
}

/**
 * Handles the OAuth callback.
 */
function authCallback(request) {
  var service = getService();
  var authorized = service.handleCallback(request);
  if (authorized) {
    return HtmlService.createHtmlOutput('Success!');
  } else {
    return HtmlService.createHtmlOutput('Denied');
  }
}


function getTimeLine() {
//最後のツイートIDをスプレッドシートに保存しておく
  var spreadsheet = SpreadsheetApp.openById('SpreadSheetのID');//https://docs.google.com/spreadsheets/d/ここの部分/edit
  var sheet = spreadsheet.getSheetByName('シート名');//シート1とかのシートの名前
  var service  = getService();
  var since_id = sheet.getRange("A1").getValue();
  var json = service.fetch("https://api.twitter.com/1.1/statuses/user_timeline.json?since_id=" + since_id);//自分のタイムラインを取得
  var array = JSON.parse(json);
  var tweets = [];
  for(var i = 0; i < array.length; i++) {//取得したツイートが1件以上あるか判断
    if(array[i]['id'] != since_id) {//最後に取得したツイートと同じか判断
      if(array[i]['retweeted']) {
        tweets.push(array[i]);
      }
    }
  }
  if(array.length != 0) {
    Logger.log("tweets取得完了");
    sheet.getRange("A1").setValue(Number(array[0]['id_str']));//最新のツイートのIDをスプレッドシートに保存
    setCalender(tweets);
  } else {
    Logger.log("tweets取得失敗");  
  }
}

function setCalender(tweets) {
  var calender = CalendarApp.getCalendarById('xxxxxxxx@gmail.com');//書き込みたいGoogleカレンダーのGmailアドレス
  
  for(var i = 0; i < tweets.length; i++) {
    var name = tweets[i]['entities']['user_mentions'][0]['name'];//誰の予定かをカレンダーに入れるため、ツイート主の名前を取得
    var text = tweets[i]['text'];//ツイートの本文中から日時情報を取得するため、ツイート本文を取得
    var day = undefined;
    var startTime = undefined;
    var endTime = undefined;
    var tmpnum = undefined;
    var num = undefined;
    var month = undefined;
    var date = undefined;
    
    //日付の設定
    if(text.match(/今日/) || text.match(/本日/)){
      day = new Date();
    } else if(text.match(/明日/)) {
      day = new Date();
      day.setDate(day.getDate() + 1);
    } else if(text.match(/明後日/)) {
      day = new Date();
      day.setDate(day.getDate() + 2);
    } else if(text.match(/(\d+)月/) && text.match(/(\d+)日/) || text.match(/([０-９]+)月/) && text.match(/([０-９]+)日/)) {
      month = text.match(/(\d+)月/);
      date = text.match(/(\d+)日/);
      if(month == null) {
        month = text.match(/([０-９]+)月/);
        month = month[1].replace(/[０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
        });
        month = Number(month);
      }
      if(date == null) {
        date = text.match(/([０-９]+)日/);
        date = date[1].replace(/[０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
        });
        date = Number(date);
      }
      day = new Date();
      day.setMonth(month);
      day.setDate(date);
    } else if(text.match(/(\d+)\//) && text.match(/\/(\d+)/) || text.match(/([０-９]+)\//) && text.match(/\/([０-９]+)/)) {
      month = text.match(/(\d+)\//);
      date = text.match(/\/(\d+)/);
      if(month == null) {
        month = text.match(/([０-９]+)\//);
        month = month[1].replace(/[０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
        });
        month = Number(month);
      }
      if(date == null) {
        date = text.match(/\/([０-９]+)/);
        date = date[1].replace(/[０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
        });
        date = Number(date);
      }
      day = new Date();
      day.setMonth(Number(month[1]));
      day.setDate(Number(date[1]));
    }
    
    //日付があったら時間を設定
    if(text.match(/時から/) || text.match(/時～/) || text.match(/時/) && typeof day !== 'undefined') {
      tmpnum = text.match(/(\d+)時/);
      if(tmpnum == null) {
        tmpnum = text.match(/([０-９]+)時/);
        tmpnum[1] = tmpnum[1].replace(/[０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
        });
      }
      num = Number(tmpnum[1]);
      startTime = new Date();
      startTime.setDate(day.getDate());
      startTime.setHours(num);
      startTime.setMinutes(0);
      startTime.setSeconds(0);
      endTime = new Date();
      endTime.setDate(startTime.getDate());
      endTime.setHours(startTime.getHours() + 1);
      endTime.setMinutes(0);
      endTime.setSeconds(0);
    }else if(text.match(/:00/) || text.match(/:00～/) || text.match(/:30/) || text.match(/:30～/)&& typeof day !== 'undefined') {
      tmpnum = text.match(/(\d+):/);
      if(tmpnum == null) {
        tmpnum = text.match(/([０-９]+)：/);
        tmpnum[1] = tmpnum[1].replace(/[０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
        });
      }
      num = Number(tmpnum[1]);
      startTime = new Date();
      startTime.setDate(day.getDate());
      startTime.setHours(num);
      startTime.setMinutes(0);
      startTime.setSeconds(0);
      endTime = new Date();
      endTime.setDate(startTime.getDate());
      endTime.setHours(startTime.getHours() + 1);
      endTime.setMinutes(0);
      endTime.setSeconds(0);
    }
    
    var scheduleFlag = false;
    //予定を重複させないために、既存のカレンダーから予定を取得
    if(typeof day !== 'undefined') {
      var schedules = calender.getEvents(startTime,endTime);
      for(var j = 0; j < schedules.length; j++) {
        //既存の予定が入ってるか比較
        tmpSchedulesStartTIme = Utilities.formatDate(schedules[j].getStartTime(), 'Asia/Tokyo','yyyy/MM/dd HH:MM');
        tmpstartTIme = Utilities.formatDate(startTime, 'Asia/Tokyo','yyyy/MM/dd HH:MM');
        tmptitle = schedules[j].getTitle();
        if(tmpSchedulesStartTIme == tmpstartTIme) {
          scheduleFlag = true;
        }
      }
    }
    
    //カレンダーに予定を設定
    if(typeof day !== 'undefined' && typeof startTime !== 'undefined' && scheduleFlag == false) {
      //時間情報があれば時間もカレンダーに設定
      calender.createEvent(name, startTime, endTime);
    } else if (typeof day !== 'undefined' && scheduleFlag == false) {
      //日付だけの場合は、終日の予定をしてカレンダーに設定
      calender.createAllDayEvent(name, day);
    }
//    else {
//      Logger.log("予定はありません");
//    }
  }
}
